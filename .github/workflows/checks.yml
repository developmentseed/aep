# This workflow performs basic checks:
#   1. run a preparation step to install and cache node modules
#   2. once prep succeeds, run lint, test and build in parallel
#   3. if pushing to 'main', deploy application to AWS

name: Check and Deploy

on: push

env:
  NODE: 14
  DEPLOY_BRANCH: main
  DEPLOY_BUCKET: tmp-frontend-test-aep-olaf

jobs:
  prep:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ env.NODE }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}

      - name: Install
        run: yarn install

  lint:
    needs: prep
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ env.NODE }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}

      - name: Install
        run: yarn install

      - name: Lint
        run: yarn lint

  test:
    needs: prep
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ env.NODE }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}

      - name: Install
        run: yarn install

      - name: Test
        run: yarn test

  build:
    needs: prep
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ env.NODE }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}

      - name: Cache dist
        uses: actions/cache@v2
        id: cache-dist
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Install
        run: yarn install

      - name: Build
        run: yarn build

      - name: Persist ./dist folder on deploy branch
        uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/tmp/check'
        with:
          name: dist
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/tmp/check'

    steps:
      - name: Download cached ./dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          
      - name: Display structure of downloaded files
        run: ls -R

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.DEPLOY_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
